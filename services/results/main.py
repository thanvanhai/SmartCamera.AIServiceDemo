# services/results/main.py

import asyncio
import logging
import os
from .processor import ResultsProcessor
from infrastructure.messaging.kafka.consumer import KafkaConsumer
# THAY ƒê·ªîI 1: Import th√™m l·ªõp WebAPIConfig
from infrastructure.external.webapi_client import WebAPIClient, WebAPIConfig

# --- C·∫•u h√¨nh t·∫≠p trung ---
KAFKA_BROKER = os.getenv('KAFKA_BOOTSTRAP_SERVERS', "localhost:9092")
RESULTS_TOPIC = "smartcamera.ai_results"
CONSUMER_GROUP_ID = "ai_results_processor_group"
WEBAPI_BASE_URL = os.getenv('WEBAPI_BASE_URL', "http://webapi.local")
WEBAPI_API_KEY = os.getenv('WEBAPI_API_KEY', "YOUR_API_KEY")

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def main():
    """
    H√†m ch√≠nh ƒë·ªÉ kh·ªüi t·∫°o v√† ch·∫°y service.
    """
    logger.info("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o service x·ª≠ l√Ω k·∫øt qu·∫£ AI...")

    # Kh·ªüi t·∫°o Kafka Consumer
    consumer = KafkaConsumer(
        bootstrap_servers=KAFKA_BROKER,
        group_id=CONSUMER_GROUP_ID,
        auto_offset_reset='earliest'
    )

    # --- THAY ƒê·ªîI 2: S·ª≠a l·∫°i c√°ch kh·ªüi t·∫°o WebAPIClient ---

    # 2a. T·∫°o ƒë·ªëi t∆∞·ª£ng c·∫•u h√¨nh WebAPIConfig tr∆∞·ªõc
    webapi_config = WebAPIConfig(
        base_url=WEBAPI_BASE_URL,
        api_key=WEBAPI_API_KEY,
        timeout=45 # C√≥ th·ªÉ t√πy ch·ªânh c√°c gi√° tr·ªã kh√°c n·∫øu mu·ªën
    )

    # 2b. Truy·ªÅn ƒë·ªëi t∆∞·ª£ng config v√†o WebAPIClient
    webapi_client = WebAPIClient(config=webapi_config)
    
    # ----------------------------------------------------
    
    # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn kh√°c
    cameras_ws_map = {}

    # Kh·ªüi t·∫°o b·ªô x·ª≠ l√Ω ch√≠nh (Processor)
    processor = ResultsProcessor(
        consumer=consumer,
        topic_to_consume=RESULTS_TOPIC,
        minio_client=None,
        webapi_client=webapi_client,
        cameras_ws_map=cameras_ws_map
    )

    try:
        logger.info(f"B·∫Øt ƒë·∫ßu l·∫Øng nghe v√† x·ª≠ l√Ω t·ª´ topic '{RESULTS_TOPIC}'...")
        # S·ª≠ d·ª•ng WebAPIClient nh∆∞ m·ªôt context manager ƒë·ªÉ t·ª± ƒë·ªông k·∫øt n·ªëi v√† ng·∫Øt k·∫øt n·ªëi
        async with webapi_client:
            await processor.run()

    except Exception as e:
        logger.error(f"L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh ch·∫°y processor: {e}", exc_info=True)
    finally:
        logger.info("D·ªçn d·∫πp v√† ƒë√≥ng c√°c k·∫øt n·ªëi...")
        await consumer.close()
        # webapi_client.close() s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông g·ªçi nh·ªù "async with"


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Ch∆∞∆°ng tr√¨nh ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng (Ctrl+C).")